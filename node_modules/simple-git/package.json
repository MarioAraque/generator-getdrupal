{
  "name": "simple-git",
  "description": "Simple GIT interface for node.js",
  "version": "0.7.0",
  "author": {
    "name": "Steve King",
    "email": "steve@mydev.co"
  },
  "contributors": [
    {
      "name": "Steve King",
      "email": "steve@mydev.co"
    }
  ],
  "dependencies": {},
  "devDependencies": {
    "grunt-release-steps": "~0.3.7",
    "grunt": "~0.4.1"
  },
  "keywords": [
    "git",
    "source control",
    "vcs"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/steveukx/git-js.git"
  },
  "main": "src/git.js",
  "bin": {},
  "scripts": {},
  "config": {},
  "engines": {
    "node": ">= 0.10.0"
  },
  "readme": "# Simple Git\n\nA light weight interface for running git commands in any [node.js](http://nodejs.org) application.\n\n# Installation\n\nEasiest through [npm](http://npmjs.org): `npm install simple-git`\n\n# Dependencies\n\nRelies on [git](http://git-scm.com/downloads) already having been installed on the system, and that it can be called\nusing the command `git`.\n\n# Usage\n\nInclude into your app using:\n\n    var simpleGit = require('simple-git')( workingDirPath );\n\nwhere the `workingDirPath` is optional, defaulting to the current directory.\n\nUse `simpleGit` by chaining any of its functions together. Each function accepts an optional final argument which will\nbe called when that step has been completed. When it is called it has two arguments - firstly an error object (or null\nwhen no error occurred) and secondly the data generated by that call.\n\n`.clone(repoPath, localPath, handlerFn)` clone a remote repo at `repoPath` to a local directory at `localPath`\n\n`.diff(options, handlerFn)` get the diff of the current repo compared to the last commit with a set of options supplied as a string\n\n`.diff(handlerFn)` get the diff for all file in the current repo compared to the last commit\n\n`.pull(remote, branch, handlerFn)` pull all updates from the repo ('origin'/'master')\n\n`.fetch(remote, branch, handlerFn)` update the local working copy database with changes from a remote repo\n\n`.fetch(handlerFn)` update the local working copy database with changes from the default remote repo and branch\n\n`.tags(handlerFn)` list all tags\n\n`.checkout(checkoutWhat, handlerFn)` checks out the supplied tag, revision or branch\n\n`.checkoutBranch(branchName, startPoint, handlerFn)` checks out a new branch from the supplied start point\n\n`.checkoutLatestTag(handlerFn)` convenience method to pull then checkout the latest tag\n\n`.add([fileA, ...], handlerFn)` adds one or more files to be under source control\n\n`.commit(message, handlerFn)` commits changes in the current working directory with the supplied message\n\n`.commit(message, [fileA, ...], handlerFn)` commits changes on the named files with the supplied message\n\n`.push(remote, branch, handlerFn)` pushes to a named remote and named branch\n\n`.rm([fileA, ...], handlerFn)` removes any number of files from source control\n\n`.rmKeepLocal([fileA, ...], handlerFn)` removes files from source control but leaves them on disk\n\n`.addRemote(name, repo, handlerFn)` adds a new named remote to be tracked as `name` at the path `repo`\n\n`.removeRemote(name, handlerFn)` removes the named remote\n\n`.listRemote([args], handlerFn)` lists remote repositories - there are so many optional arguments in the underlying\n`git ls-remote` call, just supply any you want to use as the optional `args` string.\n\n\n# Examples\n\n    // update repo and get a list of tags\n    require('simple-git')(__dirname + '/some-repo')\n         .pull()\n         .tags(function(err, tags) {\n            console.log(\"Latest available tag: %s\", tags.latest);\n         });\n\n\n    // update repo and when there are changes, restart the app\n    require('simple-git')()\n         .pull(function(err, update) {\n            if(update && update.summary.changes) {\n               require('child_process').exec('npm restart');\n            }\n         });\n\n\n    // starting a new repo\n    require('simple-git')()\n         .init()\n         .add('./*')\n         .commit(\"first commit!\")\n         .addRemote('origin', 'https://github.com/user/repo.git')\n         .push('origin', 'master');\n\n\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/steveukx/git-js/issues"
  },
  "homepage": "https://github.com/steveukx/git-js",
  "_id": "simple-git@0.7.0",
  "_from": "simple-git@~0.7.0"
}
